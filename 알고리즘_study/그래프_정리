- 그래프란?
그래프란 노드와 에지로 구성된 집합이다.
노드는 데이터를 표현하는 단위이고 에지는 노드를 연결한다.
** 트리도 그래프의 일종이다. **

- 그래프의 종류
1. 유니온 파인드
    => 그래프의 사이클이 생성되는지 판별하는 알고리즘

2. 위상 정렬
    => 사이클이 없고 방향이 있는 그래프여야만하고
        그래프의 노드를 정렬해주는 알고리즘이다. 정렬 결과가 꼭 1개 X,
        대표 예시: 수강신청(전후 관계 O == 방향 O == 사이클 X)

3. 다익스트라
    => 최단거리 알고리즘,
        S 시작점에서 다른 모든 노드로 가는 최단거리를 구하는 알고리즘
        단, 음수간선은 있으면 안된다.

4. 벨만-포드
    => 최단거리 알고리즘,
        다익스트라와 비슷하지만 벨만-포드는 음수간선 O,
        벨만-포드는 실제로 최단거리를 구하는 문제보다
        음수 사이클이 있는지 체크하는 문제가 더 많이 나온다.

5. 플로이드-워셜
    => 최단거리 알고리즘
        시작점이 없다. 어떤 노드를 체크하더라도 모든 노드에 대한 최단거리를 구한다.
        다익스트라, 벨만-포드 보다 시간복잡도가 좋지않다.

6. 최소 신장 트리
    => 간선의 가중치가 최소가 되게끔 구하는 알고리즘,
        사이클 X


- 그래프의 표현
1. 에지 리스트(edge list)
에지를 중심으로 그래프를 표현.
배열에 출발 노드, 도착 노드를 저장하여 에지를 표현한다.(가중치 X) or
출발 노드, 도착 노드, 가중치를 저장하여 가중치가 있는 에지를 표현한다.

- 가중치가 없는 그래프 = 배열의 행은 2개면 충분           S(시작노드), E(마지막노드)
- 가중치가 있는 그래프 = 배열의 3행부터 가중치를 저장한다. S, E, V(가중치)

** 벨만-포드, 크루스칼 알고리즘에 사용, 노드 중심 알고리즘에는 잘 사용하지 않는다. **

2. 인접 행렬(adjacency matrix)
2차원 배열을 자료구조로 이용하여 그래프를 표현. (N(노드 개수) = [N][N])
에지 리스트와 다르게 노드 중심으로 그래프를 표현한다.

- 가중치가 없는 그래프 = 1에서 2를 향하는 에지를 1행 2열에 1을 저장하는 방식으로 표현한다.
1을 저장하는 이유는 가중치가 없기 때문이다. (True, False)
- 가중치가 있는 그래프 = 1에서 2를 향하는 에지를 1행 2열에 가중치가 8이라면 8을 저장한다.

**
노드와 관련되어 있는 에지를 탐색하려면 N번 접근해야하므로 노드 개수에 비해
에지가 적을 때는 공간효율성이 떨어진다.
인접행렬은 노드 개수에 따라 사용 여부를 적절하게 판단하는 능력이 필요.
**

3. 인접 리스트(adjacency list)      ****중요****
ArrayList로 그래프를 표현.
노드 개수만큼 ArrayList를 선언한다. 자료형은 경우에 맞게 사용한다.

- 가중치가 없는 그래프
Integer형이면 ArrayList<Integer>[N] 로 선언.
N번 노드와 연결되어 있는 노드를 배열의 위치 N에 연결된 노드 개수만큼 배열을 연결하는 방식으로 표현.
배열 하나하나가 모두 ArrayList, 가변적인 특징이 있고 인덱스로 직접 접근이 가능하다.

- 가중치가 있는 그래프
가중치가 있는 경우 자료형을 클래스로 사용한다. ArrayList<Node>[N] 로 선언. 
                                                Node = 만들어야할 class
                                                // 예시: A[S].add(new Node(E, V))

** 
그래프 구현은 복잡한편이지만 노드와 연결되어 있는 에지를 탐색하는 시간이 매우 뛰어남.
(시작노드를 배열의 형태로 선언해주었기 때문)
인접 행렬과 다르게 빈 공간이 없으므로 공간효율성이 좋아 메모리 초과 발생 X
**