- 동적 계획법(dynamic programing)이란?
동적 계획법은 복잡한 문제를 여러 개의 간단한 문제로 분리하여 부분의 문제들을 
해결함으로써 최종적으로 복잡한 문제의 답을 구하는 방법을 뜻한다.

- 동적 계획법의 원리와 구현 방식
1. 큰 문제를 작은 문제로 나눌 수 있어야 한다.
2. 작은 문제들이 반복돼 나타나고 사용되며 이 작은 문제들의
결괏값은 항상 같아야한다.
3. 모든 작은 문제들은 한 번만 계산해 DP 테이블에 저장하며 추후 재사용 할 때는
이 DP 테이블을 이용한다. 이를 메모이제이션(memoization)기법이라고 한다.
4. 동적 계획법은 톱-다운(top-down) 방식과 바텀-업(bottom-up) 방식으로 구현할 수 있다.

동적 계획법의 가장 대표적인 문제 = 피보나치 수열
피보나치 수열 공식: D[N] = D[N-1] + D[N-2]

- 동적계획법 생각해야할 것
1. 동적 계획법으로 풀 수 있는지 확인하기
예) D[N] 을 구하는 문제를 D[N-1]과 D[N-2] 두가지로 나눌 수 있다.
2. 점화식 세우기
** 점화식을 세울 때는 논리적으로 전체 문제를 나누고, 전체 문제와 부분 문제간의
인과 관계를 파악하는 훈련이 필요 **
3. 메모이제이션 원리 이해하기
메모이제이션이란?
부분 문제를 풀었을 때 이 문제를 DP 테이블에 저장해 놓고 다음에 같은 문제가 나왔을 때
재계산하지 않고 DP 테이블의 값을 이용하는 것이다.
메모이제이션을 사용하면?
메모이제이션을 사용하면 불필요한 연산과 탐색이 줄어들어 시간 복잡도 측면에서
많은 이점을 가질 수 있다.
4. 톱-다운 구현 방식 이해하기
말 그대로 위에서부터 문제를 파악해 내려오는 방식, 주로 재귀 함수 형태로 코드를 구현.
코드의 가독성이 좋고, 이해하기가 편하다는 장점이 있다.
5. 바텀-업 구현 방식 이해하기
가장 작은 부분 문제부터 문제를 해결하면서 점점 큰 문제로 확장해 나가는 방식.
주로 반복문의 형태로 구현

** 톱-다운, 바텀-업 방식중 좀 더 안전한 방식은 바텀-업이다.
톱-다운 방식은 재귀 함수의 형태로 구현돼있기 때문에 재귀의 깊이가 매우 깊어질 경우
런타임 에러가 발생할 수 있다.